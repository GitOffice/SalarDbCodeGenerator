<?xml version="1.0" encoding="utf-8" ?>
<PatternFile>
	<Name>Database Model</Name>
	<Description>Business model pattern</Description>
	<Options
		Group="TableModel"
		AppliesTo="TablesAndViewsAll"
		Overwrite="true"
		FilePath="Model\Principal\DatabaseModel.vb"
		Language="VB.NET"
		/>
	<BaseContent>
		<![CDATA[
Imports [:Namespace:].Base

Namespace Model
[#TablesAndViewsContent#]
End Namespace
]]>
	</BaseContent>

	<PatternContent Name="TablesAndViewsContent" ConditionKeyMode="TablesAndViewsAll">
		<BaseContent>[:InnerContent:]</BaseContent>
		<Condition Key="TheReplacement">
			<![CDATA[
	''' <summary>
	''' Business Model for [:TableNameDb:]
	''' </summary>
	Partial Public Class [:TableName:]Model
		Inherits ModelBase
		
		Public Class FieldsOrdinal
#Region "fields ordinal cache"
			[#OrdinalFields#]
#End Region

#Region "public methods"
			Public Sub New(ByVal dataReader As IDataReader)
				[#OrdinalFieldsReader#]
			End Sub
#End Region
		End Class
		
		Public Sub New()
		End Sub

#Region "fields variables"
		[#FieldsVariables#]
#End Region
		
#Region "fields property"
		[#FieldsProperties#]
#End Region

#Region "public methods"
		Public Overloads Sub ReadData(ByVal dataReader As IDataReader, ByVal fields As FieldsOrdinal)
			[#ReadFieldsFromOrdinalCache#]
			MyBase.SetDataLoaded(True)
		End Sub

		Public Overrides Sub ReadData(ByVal dataReader As IDataReader)
			[#ReadFieldsFromDataReader#]
			MyBase.SetDataLoaded(True)
		End Sub
#End Region
	End Class
]]>
		</Condition>
		<ConditionContents>
			<PatternContent Name="OrdinalFields" ConditionKeyMode="FieldsAll">
				<Condition Key="TheReplacement">
					<![CDATA[
			Public [:FieldName:] As Int32]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="OrdinalFieldsReader" ConditionKeyMode="FieldsAll">
				<Condition Key="TheReplacement">
					<![CDATA[
				[:FieldName:] = dataReader.GetOrdinal("[:FieldNameDb:]")]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="FieldsVariables" ConditionKeyMode="FieldKeyType" description="Table Fields Variables">
				<Condition Key="AutoInrcementPrimaryKey">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="AutoInrcement">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="AutoIncNativeNullable">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="AutoIncNullableType">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="PrimaryKey">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="NormalField">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="NativeNullable">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]]]>
				</Condition>
				<Condition Key="NullableType">
					<![CDATA[
		Private _[:FieldName:] As [:FieldDotNetType:]?]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="FieldsProperties" ConditionKeyMode="FieldKeyType" description="Table fields properties">
				<Condition Key="AutoInrcementPrimaryKey">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="AutoInrcement">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="AutoIncNativeNullable">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="AutoIncNullableType">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]?
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:]?)
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="PrimaryKey">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="NormalField">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="NativeNullable">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:])
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
				<Condition Key="NullableType">
					<![CDATA[
		''' <summary>
		''' [:FieldDescription:]
		''' </summary>
		Public Property [:FieldName:] As [:FieldDotNetType:]?
			Get
				Return Me._[:FieldName:]
			End Get
			Set(ByVal value As [:FieldDotNetType:]?)
				Me._[:FieldName:] = value
			End Set
		End Property]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="ReadFieldsFromDataReader" ConditionKeyMode="FieldKeyReadType" description="Reading fields from database">
				<Condition Key="NormalField_Convert">
					<![CDATA[
			_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader("[:FieldNameDb:]"))]]>
				</Condition>
				<Condition Key="NormalField_Cast">
					<![CDATA[
			_[:FieldName:] = (dataReader("[:FieldNameDb:]"))]]>
				</Condition>
				<Condition Key="Nullable_Convert">
					<![CDATA[
			If (dataReader.IsDBNull(dataReader.GetOrdinal("[:FieldNameDb:]")) = false) Then
				_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader("[:FieldNameDb:]"))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
				<Condition Key="Nullable_Cast">
					<![CDATA[
			If (dataReader.IsDBNull(dataReader.GetOrdinal("[:FieldNameDb:]")) = false) Then
				_[:FieldName:] = (dataReader("[:FieldNameDb:]"))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="ReadFieldsFromOrdinalCache" ConditionKeyMode="FieldKeyReadType">
				<Condition Key="NormalField_Convert">
					<![CDATA[
			_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader(fields.[:FieldName:]))]]>
				</Condition>
				<Condition Key="NormalField_Cast">
					<![CDATA[
			_[:FieldName:] = (dataReader(fields.[:FieldName:]))]]>
				</Condition>
				<Condition Key="Nullable_Convert">
					<![CDATA[
			If (dataReader.IsDBNull(fields.[:FieldName:]) = false) Then
				_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader(fields.[:FieldName:]))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
				<Condition Key="Nullable_Cast">
					<![CDATA[
			If (dataReader.IsDBNull(fields.[:FieldName:]) = false) Then
				_[:FieldName:] = (dataReader(fields.[:FieldName:]))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="ReadFieldsOrdinalFromDataReader" ConditionKeyMode="FieldKeyReadType" description="Reading fields from database">
				<Condition Key="NormalField_Convert">
					<![CDATA[
			_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader([:FieldOrdinalValue:]))]]>
				</Condition>
				<Condition Key="NormalField_Cast">
					<![CDATA[
			_[:FieldName:] = ([:FieldDotNetType:])(dataReader([:FieldOrdinalValue:]))]]>
				</Condition>
				<Condition Key="Nullable_Convert">
					<![CDATA[
			If (dataReader.IsDBNull([:FieldOrdinalValue:]) = false) Then
				_[:FieldName:] = Convert.To[:FieldDotNetType:](dataReader([:FieldOrdinalValue:]))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
				<Condition Key="Nullable_Cast">
					<![CDATA[
			if (dataReader.IsDBNull([:FieldOrdinalValue:]) = false) Then
				_[:FieldName:] = (dataReader([:FieldOrdinalValue:]))
			Else
				_[:FieldName:] = Nothing
			End If
	]]>
				</Condition>
			</PatternContent>
		</ConditionContents>
	</PatternContent>

</PatternFile>
