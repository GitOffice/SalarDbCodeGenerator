<?xml version="1.0" encoding="utf-8" ?>
<PatternFile>
	<Name>Principal Table Entity</Name>
	<Description>Business model pattern</Description>
	<Options
		Group="TableEntity"
		AppliesTo="TablesAndViewsAll"
		Overwrite="true"
		FilePath="Entities\Principal\DatabaseEntity.cs"
		Language="C#"
		/>
	<BaseContent>
		<![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Xml.Serialization;
using [:Namespace:].Base;
using [:Namespace:].BLL;

namespace [:Namespace:].Entities
{
[#TablesAndViewsContent#]
}
]]>
	</BaseContent>

	<PatternContent Name="TablesAndViewsContent" ConditionKeyMode="TablesAndViewsAll">
		<BaseContent>[:InnerContent:]</BaseContent>
		<Condition Key="TheReplacement">
			<![CDATA[
	/// <summary>
	/// User custom methods for [:TableNameDb:]
	/// </summary>
	[Table(Name = "[:TableNameDb:]")]
	public partial class [:TableName:]Entity : BaseEntity
	{
		[#FieldsProperties#]
		[#ForeignKeys#]
	}
]]>
		</Condition>
		<ConditionContents>
			<PatternContent Name="ForeignKeys" ConditionKeyMode="FieldForeignKey">
				<Condition Key="MultiplicityOne">
					<![CDATA[
		private EntityRef<[:ForeignTableName:]Entity> _[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Ref;
		/// <summary>
		/// [:ForeignTableNameDb:] - [:LocalFieldNameDb:]
		/// </summary>
		[Association(Name="[[:LocalFieldNameDb:]]", Storage = "_[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Ref", ThisKey = "[:LocalFieldName:]", OtherKey="[:ForeignFieldName:]", IsForeignKey=true)]
		[XmlIgnoreAttribute]
		[SoapIgnoreAttribute]
		[BrowsableAttribute(false)]
		public [:ForeignTableName:]Entity [:ForeignTableNameAsField:]
		{
			get { return this._[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Ref.Entity; }
			set { this._[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Ref.Entity = value; }
		}
]]>
				</Condition>
				<Condition Key="MultiplicityMany">
					<![CDATA[
		private EntitySet<[:ForeignTableName:]Entity> _[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Many;
		/// <summary>
		/// [:ForeignTableNameDb:] - [:LocalFieldNameDb:]
		/// </summary>
		[Association(Name="[[:LocalFieldNameDb:]]", Storage = "_[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Many", ThisKey = "[:LocalFieldName:]", OtherKey="[:ForeignFieldName:]", IsForeignKey=true)]
		[XmlIgnoreAttribute]
		[SoapIgnoreAttribute]
		[BrowsableAttribute(false)]
		public EntitySet<[:ForeignTableName:]Entity> [:ForeignTableNameAsField:]
		{
			get { return this._[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Many; }
			set { this._[:LocalFieldName:]_[:ForeignTableName:]_[:ForeignFieldName:]Many.Assign(value); }
		}
]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="FieldsProperties" ConditionKeyMode="FieldKeyType">
				<Condition Key="AutoInrcementPrimaryKey">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = true, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="AutoInrcement">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="AutoIncNativeNullable">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="AutoIncNullableType">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:]? [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="PrimaryKey">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = true, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="NormalField">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="NativeNullable">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:] [:FieldName:] { get; set; }]]>
				</Condition>
				<Condition Key="NullableType">
					<![CDATA[
		/// <summary>
		/// [:FieldDescription:]
		/// </summary>
		[DisplayName("[:FieldDescription:]"), Description("[:FieldDescription:]")]
		[Column(Name="[[:FieldNameDb:]]", IsPrimaryKey = [:FieldIsPrimaryKey:], IsDbGenerated = false, CanBeNull = [:FieldCanBeNull:], DbType = "[:FieldDbTypeSize:]")]
		public [:FieldDotNetType:]? [:FieldName:] { get; set; }]]>
				</Condition>
			</PatternContent>
		</ConditionContents>
	</PatternContent>
</PatternFile>
