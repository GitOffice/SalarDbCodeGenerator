<?xml version="1.0" encoding="utf-8" ?>
<PatternFile>
	<Name>Database DAL</Name>
	<Description>Data access layer pattern</Description>
	<Options
		Group="TableDAL"
		AppliesTo="TablesAndViewsAll"
		Overwrite="true"
		FilePath="DAL\Principal\DatabaseDAL.cs"
		Language="C#"
		/>
	<BaseContent>
		<![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using [:ProviderClassReferenceName:];
using [:Namespace:].Base;
using [:Namespace:].Model;
using [:Namespace:].Common;

namespace [:Namespace:].DAL
{
[#TablesAndViewsContent#]
}
]]>
	</BaseContent>

	<PatternContent Name="TablesAndViewsContent" ConditionKeyMode="TablesAndViewsAll">
		<BaseContent>[:InnerContent:]</BaseContent>
		<Condition Key="TheReplacement">
			<![CDATA[
	/// <summary>
	/// Data access layer for [:TableNameDb:]
	/// </summary>
	public partial class [:TableName:]DAL : [:DatabaseName:]DALBase
	{
		internal [:TableName:]DAL()
		{

		}
		internal [:TableName:]DAL([:DatabaseName:]DbTransaction transaction, IDbConnection connection)
		{
			Connection = connection;
			Transaction = transaction;
		}

		public List<[:TableName:]Model> GetAll()
		{
			List<[:TableName:]Model> result = new List<[:TableName:]Model>();

			using ([:ProviderClassCommand:] cmd = GetNewCommand())
			{
				cmd.CommandType = CommandType.StoredProcedure;
				cmd.CommandText = "[:TableNameDb:]_GetAll";

				IDataReader reader = null;
				try
				{
					reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
					[:TableName:]Model.FieldsOrdinal fields = new [:TableName:]Model.FieldsOrdinal(reader);
					while (reader.Read())
					{
						[:TableName:]Model model = new [:TableName:]Model();
						model.ReadData(reader, fields);
						result.Add(model);
					}
				}
				catch (Exception)
				{
					throw;
				}
				finally
				{
					if (reader != null)
						reader.Close();
				}
			}
			return result;
		}
[#UpdatableTable#]
[#ForeignKeys#]
[#IndexConstraintKeys#]
[#UniqueConstraintKeys#]
	}
]]>
		</Condition>
		<ConditionContents>
			<PatternContent Name="ForeignKeys" ConditionKeyMode="FieldsForeignKeyAll">
				<Condition Key="MultiplicityMany"></Condition>
				<Condition Key="MultiplicityOne">
					<![CDATA[
		public List<[:LocalTableName:]Model> GetBy[:LocalFieldName:]([:LocalFieldDotNetType:] [:LocalFieldName:])
		{
			List<[:LocalTableName:]Model> result = new List<[:LocalTableName:]Model>();

			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:LocalTableNameDb:]_GetBy[:LocalFieldNameDb:]";
					
					cmd.Parameters.AddWithValue("@[:LocalFieldNameDb:]", [:LocalFieldName:]);

					IDataReader reader = null;
					try
					{
						reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
						[:LocalTableName:]Model.FieldsOrdinal fields = new [:LocalTableName:]Model.FieldsOrdinal(reader);
						while (reader.Read())
						{
							[:LocalTableName:]Model model = new [:LocalTableName:]Model();
							model.ReadData(reader, fields);
							result.Add(model);
						}
					}
					catch (Exception)
					{
						throw;
					}
					finally
					{
						if (reader != null)
							reader.Close();
					}
				}
				return result;
			}
			catch (Exception)
			{
				throw;
			}		
		}]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="IndexConstraintKeys" ConditionKeyMode="TableIndexConstraint">
				<Condition Key="NormalKey">
					<![CDATA[
		public List<[:TableName:]Model> GetBy[:IndexKeyName:]([:IndexKeyDotNetType:] [:IndexKeyName:])
		{
			List<[:TableName:]Model> result = new List<[:TableName:]Model>();

			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_GetBy[:IndexKeyNameDb:]";
					
					cmd.Parameters.AddWithValue("@[:IndexKeyNameDb:]", [:IndexKeyName:]);

					IDataReader reader = null;
					try
					{
						reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
						[:TableName:]Model.FieldsOrdinal fields = new [:TableName:]Model.FieldsOrdinal(reader);
						while (reader.Read())
						{
							[:TableName:]Model model = new [:TableName:]Model();
							model.ReadData(reader, fields);
							result.Add(model);
						}
					}
					catch (Exception)
					{
						throw;
					}
					finally
					{
						if (reader != null)
							reader.Close();
					}
				}
				return result;
			}
			catch (Exception)
			{
				throw;
			}		
		}
]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="UniqueConstraintKeys" ConditionKeyMode="TableUniqueConstraint">
				<Condition Key="NormalKey">
					<![CDATA[
		public [:TableName:]Model GetBy[:IndexKeyName:]([:IndexKeyDotNetType:] [:IndexKeyName:])
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_GetBy[:IndexKeyNameDb:]";
	
					IDataReader reader = null;
					try
					{
						cmd.Parameters.AddWithValue("@[:IndexKeyNameDb:]", [:IndexKeyName:]);
	
						reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
						if (reader.Read())
						{
							[:TableName:]Model result = new [:TableName:]Model();
							result.ReadData(reader);
							return result;
						}
						else
							return null;
					}
					finally
					{
						if (reader != null)
							reader.Close();
					}
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public void DeleteBy[:IndexKeyName:]([:IndexKeyDotNetType:] [:IndexKeyName:])
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_DeleteBy[:IndexKeyNameDb:]";
	
					cmd.Parameters.AddWithValue("@[:IndexKeyNameDb:]", [:IndexKeyName:]);
	
					[:DatabaseName:]DbProvider.ExecuteNonQuery(cmd);
				}
			}
			catch (Exception)
			{
				throw;
			}
		}]]>
				</Condition>
			</PatternContent>

			<PatternContent Name="UpdatableTable" ConditionKeyMode="TablePrimaryKey">
				<Condition Key="ReadOnlyTable"></Condition>
				<Condition Key="NoPrimaryKey">
					<![CDATA[
		public [:AutoIncrementDotNetType:] Insert([:TableName:]Model model)
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_Insert";

					[#InsertParameters#]

					[#InsertMethod#]
				}
			}
			catch (Exception)
			{
				throw;
			}
		}]]>
				</Condition>
				<Condition Key="WithPrimaryKey">
					<![CDATA[
		public [:TableName:]Model GetBy[:PrimaryKeyName:]([:PrimaryKeyDotNetType:] [:PrimaryKeyName:])
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_GetBy[:PrimaryKeyNameDb:]";
	
					IDataReader reader = null;
					try
					{
						cmd.Parameters.AddWithValue("@[:PrimaryKeyNameDb:]", [:PrimaryKeyName:]);
	
						reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
						if (reader.Read())
						{
							[:TableName:]Model result = new [:TableName:]Model();
							result.ReadData(reader);
							return result;
						}
						else
							return null;
					}
					finally
					{
						if (reader != null)
							reader.Close();
					}
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public bool GetBy[:PrimaryKeyName:]([:PrimaryKeyDotNetType:] [:PrimaryKeyName:], [:TableName:]Model result)
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_GetBy[:PrimaryKeyNameDb:]";

					IDataReader reader = null;
					try
					{
						cmd.Parameters.AddWithValue("@[:PrimaryKeyNameDb:]", [:PrimaryKeyName:]);

						reader = [:DatabaseName:]DbProvider.ExecuteReader(cmd);
						if (reader.Read())
						{
							result.ReadData(reader);
							return true;
						}
						else
							return false;
					}
					finally
					{
						if (reader != null)
							reader.Close();
					}
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public void Update([:TableName:]Model model)
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_Update";
	
					[#UpdateParameters#]
					
					[:DatabaseName:]DbProvider.ExecuteNonQuery(cmd);
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public [:AutoIncrementDotNetType:] Insert([:TableName:]Model model)
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_Insert";
	
					[#InsertParameters#]

					[#InsertMethod#]
				}
			}
			catch (Exception)
			{
				throw;
			}
		}

		public void Delete([:PrimaryKeyDotNetType:] [:PrimaryKeyName:])
		{
			try
			{
				using ([:ProviderClassCommand:] cmd = GetNewCommand())
				{
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "[:TableNameDb:]_DeleteBy[:PrimaryKeyNameDb:]";
	
					cmd.Parameters.AddWithValue("@[:PrimaryKeyNameDb:]", [:PrimaryKeyName:]);
	
					[:DatabaseName:]DbProvider.ExecuteNonQuery(cmd);
				}
			}
			catch (Exception)
			{
				throw;
			}
		}]]>
				</Condition>

				<ConditionContents>
					<PatternContent Name="InsertParameters" ConditionKeyMode="FieldsKeyTypeAll">
						<Condition Key="AutoInrcementPrimaryKey"></Condition>
						<Condition Key="AutoInrcement"></Condition>
						<Condition Key="AutoIncNativeNullable"></Condition>
						<Condition Key="AutoIncNullableType"></Condition>
						<Condition Key="NormalField">
							<![CDATA[
					cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);]]>
						</Condition>
						<Condition Key="PrimaryKey">
							<![CDATA[
					cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);]]>
						</Condition>
						<Condition Key="NativeNullable">
							<![CDATA[
					if(model.[:FieldName:]!=null)
						cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);
]]>
						</Condition>
						<Condition Key="NullableType">
							<![CDATA[
					if(model.[:FieldName:].HasValue)
						cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:].Value);
]]>
						</Condition>
					</PatternContent>

					<PatternContent Name="UpdateParameters" ConditionKeyMode="FieldsKeyTypeAll">
						<Condition Key="AutoInrcementPrimaryKey">
							<![CDATA[
					cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);]]>
						</Condition>
						<Condition Key="AutoInrcement"></Condition>
						<Condition Key="AutoIncNativeNullable"></Condition>
						<Condition Key="AutoIncNullableType"></Condition>
						<Condition Key="NormalField">
							<![CDATA[
					cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);]]>
						</Condition>
						<Condition Key="PrimaryKey">
							<![CDATA[
					cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);]]>
						</Condition>
						<Condition Key="NativeNullable">
							<![CDATA[
					if(model.[:FieldName:]!=null)
						cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:]);
]]>
						</Condition>
						<Condition Key="NullableType">
							<![CDATA[
					if(model.[:FieldName:].HasValue)
						cmd.Parameters.AddWithValue("@[:FieldNameDb:]", model.[:FieldName:].Value);
]]>
						</Condition>
					</PatternContent>

					<PatternContent Name="InsertMethod" ConditionKeyMode="TableAutoIncrement">
						<Condition Key="NoAutoIncrement" description="There is no auto increment field in table.">
							<![CDATA[
					[:DatabaseName:]DbProvider.ExecuteNonQuery(cmd);]]>
						</Condition>
						<Condition Key="OneAutoIncrement" description="There is one increment field in table.">
							<![CDATA[
					Object result = null;
					result = [:DatabaseName:]DbProvider.ExecuteScalar(cmd);
					if (result == null || Convert.IsDBNull(result))
						throw new Exception("Can not get inserted auto number from db.");
					else
						return Convert.To[:AutoIncrementDotNetType:](result);]]>
						</Condition>
						<Condition Key="MoreAutoIncrement" description="There is more increment field in table.">
							<![CDATA[
					[:DatabaseName:]DbProvider.ExecuteNonQuery(cmd);]]>
						</Condition>
					</PatternContent>
				</ConditionContents>

			</PatternContent>
		</ConditionContents>

	</PatternContent>
</PatternFile>
